
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortList;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Zahir
 */
public class MainFrame extends javax.swing.JFrame implements KeyListener {
    private static SerialPort serialPort;
    private int c = 0;
    public static String receivedData;
    private boolean is_connected = false;
    private boolean en_keyboard = false;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel0 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btn_forward = new javax.swing.JButton();
        btn_backward = new javax.swing.JButton();
        btn_left = new javax.swing.JButton();
        btn_right = new javax.swing.JButton();
        btn_stop = new javax.swing.JButton();
        slider_speed = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        btn_search = new javax.swing.JButton();
        combo_ports = new javax.swing.JComboBox();
        btn_connect = new javax.swing.JButton();
        btn_disconnect = new javax.swing.JButton();
        check_keyboard = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        slider_base = new javax.swing.JSlider();
        slider_acc1 = new javax.swing.JSlider();
        slider_acc2 = new javax.swing.JSlider();
        slider_acc3 = new javax.swing.JSlider();
        slider_claw = new javax.swing.JSlider();
        slider_wrist = new javax.swing.JSlider();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        btn_cam_A = new javax.swing.JToggleButton();
        btn_cam_B = new javax.swing.JToggleButton();
        jPanel6 = new javax.swing.JPanel();
        btn_up = new javax.swing.JButton();
        btn_down = new javax.swing.JButton();
        btn_rotateY = new javax.swing.JButton();
        btn_rotateX = new javax.swing.JButton();
        btn_neutral = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        txt_command = new javax.swing.JTextField();
        btn_send = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EXTREME ");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(0, 0, 0));
        setFocusable(false);
        setLocationByPlatform(true);
        setPreferredSize(new java.awt.Dimension(440, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel0.setBackground(new java.awt.Color(102, 102, 102));
        jPanel0.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel0.setFocusable(false);

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Wheel Control", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel3.setFocusable(false);

        btn_forward.setText("Forward");
        btn_forward.setEnabled(false);
        btn_forward.setFocusable(false);
        btn_forward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_forwardActionPerformed(evt);
            }
        });

        btn_backward.setText("Backward");
        btn_backward.setEnabled(false);
        btn_backward.setFocusable(false);
        btn_backward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backwardActionPerformed(evt);
            }
        });

        btn_left.setText("Left");
        btn_left.setEnabled(false);
        btn_left.setFocusable(false);
        btn_left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_leftActionPerformed(evt);
            }
        });

        btn_right.setText("Right");
        btn_right.setEnabled(false);
        btn_right.setFocusable(false);
        btn_right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_rightActionPerformed(evt);
            }
        });

        btn_stop.setText("Stop");
        btn_stop.setEnabled(false);
        btn_stop.setFocusable(false);
        btn_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_stopActionPerformed(evt);
            }
        });

        slider_speed.setBackground(new java.awt.Color(51, 51, 51));
        slider_speed.setMajorTickSpacing(20);
        slider_speed.setMinorTickSpacing(20);
        slider_speed.setPaintLabels(true);
        slider_speed.setValue(40);
        slider_speed.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Speed", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        slider_speed.setEnabled(false);
        slider_speed.setFocusable(false);
        slider_speed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_speedStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(8, 8, 8)
                            .addComponent(btn_left)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btn_stop, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btn_right))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(slider_speed, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_backward)
                            .addComponent(btn_forward, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(slider_speed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_forward)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_stop)
                    .addComponent(btn_right)
                    .addComponent(btn_left))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_backward)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Connection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.setFocusable(false);

        btn_search.setText("Search Ports");
        btn_search.setEnabled(false);
        btn_search.setFocusable(false);
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        combo_ports.setEnabled(false);
        combo_ports.setFocusable(false);

        btn_connect.setText("Connect");
        btn_connect.setEnabled(false);
        btn_connect.setFocusable(false);
        btn_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_connectActionPerformed(evt);
            }
        });

        btn_disconnect.setText("Disconnect");
        btn_disconnect.setEnabled(false);
        btn_disconnect.setFocusable(false);
        btn_disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_disconnectActionPerformed(evt);
            }
        });

        check_keyboard.setBackground(new java.awt.Color(51, 51, 51));
        check_keyboard.setForeground(new java.awt.Color(255, 255, 255));
        check_keyboard.setText("En Keyboard");
        check_keyboard.setEnabled(false);
        check_keyboard.setFocusable(false);
        check_keyboard.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                check_keyboardStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(check_keyboard)
                    .addComponent(btn_search)
                    .addComponent(btn_connect)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(combo_ports, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_disconnect, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(btn_search)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo_ports, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_connect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_disconnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(check_keyboard)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Wheel Control", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel4.setFocusable(false);

        slider_base.setBackground(new java.awt.Color(51, 51, 51));
        slider_base.setMajorTickSpacing(50);
        slider_base.setMinorTickSpacing(50);
        slider_base.setPaintTicks(true);
        slider_base.setSnapToTicks(true);
        slider_base.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Base", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        slider_base.setEnabled(false);
        slider_base.setFocusable(false);
        slider_base.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_baseStateChanged(evt);
            }
        });

        slider_acc1.setBackground(new java.awt.Color(51, 51, 51));
        slider_acc1.setMajorTickSpacing(50);
        slider_acc1.setMinorTickSpacing(50);
        slider_acc1.setOrientation(javax.swing.JSlider.VERTICAL);
        slider_acc1.setPaintTicks(true);
        slider_acc1.setSnapToTicks(true);
        slider_acc1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "01", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        slider_acc1.setEnabled(false);
        slider_acc1.setFocusable(false);
        slider_acc1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_acc1StateChanged(evt);
            }
        });

        slider_acc2.setBackground(new java.awt.Color(51, 51, 51));
        slider_acc2.setMajorTickSpacing(50);
        slider_acc2.setMinorTickSpacing(50);
        slider_acc2.setOrientation(javax.swing.JSlider.VERTICAL);
        slider_acc2.setPaintTicks(true);
        slider_acc2.setSnapToTicks(true);
        slider_acc2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "02", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        slider_acc2.setEnabled(false);
        slider_acc2.setFocusable(false);
        slider_acc2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_acc2StateChanged(evt);
            }
        });

        slider_acc3.setBackground(new java.awt.Color(51, 51, 51));
        slider_acc3.setMajorTickSpacing(50);
        slider_acc3.setMinorTickSpacing(50);
        slider_acc3.setOrientation(javax.swing.JSlider.VERTICAL);
        slider_acc3.setPaintTicks(true);
        slider_acc3.setSnapToTicks(true);
        slider_acc3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "03", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        slider_acc3.setEnabled(false);
        slider_acc3.setFocusable(false);
        slider_acc3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_acc3StateChanged(evt);
            }
        });

        slider_claw.setBackground(new java.awt.Color(51, 51, 51));
        slider_claw.setMajorTickSpacing(50);
        slider_claw.setMinorTickSpacing(50);
        slider_claw.setOrientation(javax.swing.JSlider.VERTICAL);
        slider_claw.setPaintTicks(true);
        slider_claw.setSnapToTicks(true);
        slider_claw.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Claw", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        slider_claw.setEnabled(false);
        slider_claw.setFocusable(false);
        slider_claw.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_clawStateChanged(evt);
            }
        });

        slider_wrist.setBackground(new java.awt.Color(51, 51, 51));
        slider_wrist.setMajorTickSpacing(50);
        slider_wrist.setMinorTickSpacing(50);
        slider_wrist.setPaintTicks(true);
        slider_wrist.setSnapToTicks(true);
        slider_wrist.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Wrist", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        slider_wrist.setEnabled(false);
        slider_wrist.setFocusable(false);
        slider_wrist.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_wristStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(slider_base, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(slider_wrist, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slider_acc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slider_acc2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slider_acc3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slider_claw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(slider_acc1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(slider_base, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(slider_wrist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(slider_acc2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(slider_acc3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(slider_claw, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setFocusable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EXTREME :: Version ALPHA 2k19");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(51, 51, 51));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Camera", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel5.setFocusable(false);

        btn_cam_A.setText("Switch A");
        btn_cam_A.setEnabled(false);
        btn_cam_A.setFocusable(false);
        btn_cam_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cam_AActionPerformed(evt);
            }
        });

        btn_cam_B.setText("Switch B");
        btn_cam_B.setEnabled(false);
        btn_cam_B.setFocusable(false);
        btn_cam_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cam_BActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btn_cam_A)
            .addComponent(btn_cam_B)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_cam_A)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_cam_B)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(51, 51, 51));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Camera Pan/Tilt", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel6.setFocusable(false);

        btn_up.setText("^");
        btn_up.setEnabled(false);
        btn_up.setFocusable(false);
        btn_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_upActionPerformed(evt);
            }
        });

        btn_down.setText("v");
        btn_down.setEnabled(false);
        btn_down.setFocusable(false);
        btn_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_downActionPerformed(evt);
            }
        });

        btn_rotateY.setText(">");
        btn_rotateY.setEnabled(false);
        btn_rotateY.setFocusable(false);
        btn_rotateY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_rotateYActionPerformed(evt);
            }
        });

        btn_rotateX.setText("<");
        btn_rotateX.setEnabled(false);
        btn_rotateX.setFocusable(false);
        btn_rotateX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_rotateXActionPerformed(evt);
            }
        });

        btn_neutral.setText("O");
        btn_neutral.setEnabled(false);
        btn_neutral.setFocusable(false);
        btn_neutral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_neutralActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_rotateX)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_up)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(btn_down))
                            .addComponent(btn_neutral))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_rotateY)))
                .addGap(4, 4, 4))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(btn_up)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_neutral)
                    .addComponent(btn_rotateX)
                    .addComponent(btn_rotateY))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_down))
        );

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("<html><a href=\"http://krittimmanush.com\">@ Krittim_manush </a>2019. All Rights Reserved.</html>");

        jPanel7.setBackground(new java.awt.Color(51, 51, 51));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Command", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel7.setEnabled(false);
        jPanel7.setFocusable(false);

        txt_command.setEnabled(false);

        btn_send.setText("Send");
        btn_send.setEnabled(false);
        btn_send.setFocusable(false);
        btn_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_command, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btn_send)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_command, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_send)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel0Layout = new javax.swing.GroupLayout(jPanel0);
        jPanel0.setLayout(jPanel0Layout);
        jPanel0Layout.setHorizontalGroup(
            jPanel0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel0Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel0Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel0Layout.createSequentialGroup()
                        .addGroup(jPanel0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel0Layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel0Layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(54, 54, 54))))
        );
        jPanel0Layout.setVerticalGroup(
            jPanel0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel0Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 24, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("Serial Communication GUI");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_disconnectActionPerformed
        // TODO add your handling code here:
        disconnectPort();
        btn_connect.setEnabled(true);
        check_keyboard.setSelected(false);
        check_keyboard.setEnabled(false);
        btn_disconnect.setEnabled(false);
        btn_forward.setEnabled(false);
        btn_backward.setEnabled(false);
        btn_left.setEnabled(false);
        btn_right.setEnabled(false);
        btn_stop.setEnabled(false);
        btn_cam_A.setEnabled(false);
        btn_cam_B.setEnabled(false);
        btn_up.setEnabled(false);
        btn_down.setEnabled(false);
        btn_rotateX.setEnabled(false);
        btn_rotateY.setEnabled(false);
        btn_neutral.setEnabled(false);
        slider_speed.setEnabled(false);
        slider_base.setEnabled(false);
        slider_acc1.setEnabled(false);
        slider_acc2.setEnabled(false);
        slider_acc3.setEnabled(false);
        slider_wrist.setEnabled(false);
        slider_claw.setEnabled(false);
        txt_command.setEnabled(false);
        btn_send.setEnabled(false);
    }//GEN-LAST:event_btn_disconnectActionPerformed

    private void btn_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_connectActionPerformed
        // TODO add your handling code here:
        connectPort(combo_ports.getSelectedItem().toString());
        btn_connect.setEnabled(false);
        btn_disconnect.setEnabled(true);
        check_keyboard.setEnabled(true);
        btn_forward.setEnabled(true);
        btn_backward.setEnabled(true);
        btn_left.setEnabled(true);
        btn_right.setEnabled(true);
        btn_stop.setEnabled(true);
        btn_cam_A.setEnabled(true);
        btn_cam_B.setEnabled(true);
        btn_up.setEnabled(true);
        btn_down.setEnabled(true);
        btn_rotateX.setEnabled(true);
        btn_rotateY.setEnabled(true);
        btn_neutral.setEnabled(true);
        slider_speed.setEnabled(true);
        slider_base.setEnabled(true);
        slider_acc1.setEnabled(true);
        slider_acc2.setEnabled(true);
        slider_acc3.setEnabled(true);
        slider_wrist.setEnabled(true);
        slider_claw.setEnabled(true);
        txt_command.setEnabled(true);
        btn_send.setEnabled(true);
    }//GEN-LAST:event_btn_connectActionPerformed

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        // TODO add your handling code here:
        String [] ports = getAvailablePorts();
        ComboBoxModel<String> model = new DefaultComboBoxModel<>(ports);
        combo_ports.setModel(model);
        combo_ports.setEnabled(true);
        btn_connect.setEnabled(true);
    }//GEN-LAST:event_btn_searchActionPerformed

    private void slider_speedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_speedStateChanged
        // TODO add your handling code here:
        int val = slider_speed.getValue();
        switch(val){
            case 0:
            writeData("0");
            System.out.println("Speed Zero");
            break;
            case 20:
            writeData("1");
            System.out.println("Speed 20%");
            break;
            case 40:
            writeData("2");
            System.out.println("Speed 40%");
            break;
            case 60:
            writeData("3");
            System.out.println("Speed 60%");
            break;
            case 80:
            writeData("4");
            System.out.println("Speed 80%");
            break;
            case 100:
            writeData("5");
            System.out.println("Speed 100%");
            break;
            default:
            break;

        }
    }//GEN-LAST:event_slider_speedStateChanged

    private void btn_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_stopActionPerformed
        // TODO add your handling code here:
        controlWheel("S");
    }//GEN-LAST:event_btn_stopActionPerformed

    private void btn_rightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_rightActionPerformed
        // TODO add your handling code here:
        controlWheel("R");
    }//GEN-LAST:event_btn_rightActionPerformed

    private void btn_leftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_leftActionPerformed
        // TODO add your handling code here:
        controlWheel("L");
    }//GEN-LAST:event_btn_leftActionPerformed

    private void btn_backwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backwardActionPerformed
        // TODO add your handling code here:
        controlWheel("B");
    }//GEN-LAST:event_btn_backwardActionPerformed

    private void btn_forwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_forwardActionPerformed
        // TODO add your handling code here:
        controlWheel("F");
    }//GEN-LAST:event_btn_forwardActionPerformed

    private void slider_baseStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_baseStateChanged
        // TODO add your handling code here:
        int x = slider_base.getValue();
        controlArm(x,"N","M");
    }//GEN-LAST:event_slider_baseStateChanged

    private void slider_acc1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_acc1StateChanged
        // TODO add your handling code here:
        int x = slider_acc1.getValue();
        controlArm(x,"R","F");
    }//GEN-LAST:event_slider_acc1StateChanged

    private void slider_acc2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_acc2StateChanged
        // TODO add your handling code here:
        int x = slider_acc2.getValue();
        controlArm(x,"T","G");
    }//GEN-LAST:event_slider_acc2StateChanged

    private void slider_acc3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_acc3StateChanged
        // TODO add your handling code here:
        int x = slider_acc3.getValue();
        controlArm(x,"Y","H");
    }//GEN-LAST:event_slider_acc3StateChanged

    private void slider_wristStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_wristStateChanged
        // TODO add your handling code here:
        int x = slider_wrist.getValue();
        controlArm(x,"U","I");
    }//GEN-LAST:event_slider_wristStateChanged

    private void slider_clawStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_clawStateChanged
        // TODO add your handling code here:
        int x = slider_claw.getValue();
        controlArm(x,"O","P");
    }//GEN-LAST:event_slider_clawStateChanged

    private void btn_cam_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cam_AActionPerformed
        // TODO add your handling code here:
        if(btn_cam_A.isSelected()){
            controlCamera("a");
        }
        else{
            controlCamera("b");
        }
    }//GEN-LAST:event_btn_cam_AActionPerformed

    private void btn_cam_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cam_BActionPerformed
        // TODO add your handling code here:
        if(btn_cam_B.isSelected()){
            controlCamera("c");
        }
        else{
            controlCamera("d");
        }
    }//GEN-LAST:event_btn_cam_BActionPerformed

    private void btn_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_upActionPerformed
        // TODO add your handling code here:
        controlCamera(",");
    }//GEN-LAST:event_btn_upActionPerformed

    private void btn_rotateXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_rotateXActionPerformed
        // TODO add your handling code here:
        controlCamera("<");
    }//GEN-LAST:event_btn_rotateXActionPerformed

    private void btn_rotateYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_rotateYActionPerformed
        // TODO add your handling code here:
        controlCamera(">");
    }//GEN-LAST:event_btn_rotateYActionPerformed

    private void btn_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_downActionPerformed
        // TODO add your handling code here:
        controlCamera(".");
    }//GEN-LAST:event_btn_downActionPerformed

    private void btn_neutralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_neutralActionPerformed
        // TODO add your handling code here:
        controlCamera("?");
    }//GEN-LAST:event_btn_neutralActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        btn_search.setEnabled(true);
    }//GEN-LAST:event_formWindowOpened

    private void check_keyboardStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_check_keyboardStateChanged
        // TODO add your handling code here:
        en_keyboard = check_keyboard.isSelected();
        if(check_keyboard.isSelected()){
            txt_command.setFocusable(false);
        }
        else{
            txt_command.setFocusable(true);
        }
    }//GEN-LAST:event_check_keyboardStateChanged

    private void btn_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sendActionPerformed
        // TODO add your handling code here:
        String s = txt_command.getText();
        writeData(s);
        System.out.println("Send "+s);
        txt_command.setText("");
    }//GEN-LAST:event_btn_sendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_backward;
    private javax.swing.JToggleButton btn_cam_A;
    private javax.swing.JToggleButton btn_cam_B;
    private javax.swing.JButton btn_connect;
    private javax.swing.JButton btn_disconnect;
    private javax.swing.JButton btn_down;
    private javax.swing.JButton btn_forward;
    private javax.swing.JButton btn_left;
    private javax.swing.JButton btn_neutral;
    private javax.swing.JButton btn_right;
    private javax.swing.JButton btn_rotateX;
    private javax.swing.JButton btn_rotateY;
    private javax.swing.JButton btn_search;
    private javax.swing.JButton btn_send;
    private javax.swing.JButton btn_stop;
    private javax.swing.JButton btn_up;
    private javax.swing.JCheckBox check_keyboard;
    private javax.swing.JComboBox combo_ports;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel0;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JSlider slider_acc1;
    private javax.swing.JSlider slider_acc2;
    private javax.swing.JSlider slider_acc3;
    private javax.swing.JSlider slider_base;
    private javax.swing.JSlider slider_claw;
    private javax.swing.JSlider slider_speed;
    private javax.swing.JSlider slider_wrist;
    private javax.swing.JTextField txt_command;
    // End of variables declaration//GEN-END:variables

    
    public String [] getAvailablePorts(){
        String[] portNames = SerialPortList.getPortNames();
        for (String portName : portNames) {
            System.out.println(portName);
        }
        return portNames;
    }
    
    public void connectPort(String portName){
        serialPort = new SerialPort(portName);
        try {
            serialPort.openPort();
            serialPort.setParams(SerialPort.BAUDRATE_9600, 
                                 SerialPort.DATABITS_8,
                                 SerialPort.STOPBITS_1,
                                 SerialPort.PARITY_NONE);
            is_connected = true;
            System.out.println(portName+ " Connected");
         
        }
        catch (SerialPortException ex) {
            System.out.println(ex);
        }
    }
    
    public void readData(){
        try {
            serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_RTSCTS_IN |
                    SerialPort.FLOWCONTROL_RTSCTS_OUT);
            serialPort.addEventListener(new SerialPortReader(), SerialPort.MASK_RXCHAR);
        } catch (SerialPortException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void writeData(String s){
        if(is_connected){
            try {
                serialPort.writeBytes(s.getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }
    
    public void disconnectPort(){
        if(is_connected){
            try {
                serialPort.closePort();
                is_connected = false;
                System.out.println(serialPort.getPortName() + " Disconnected");
            } catch (SerialPortException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    private void controlWheel(String s){
        writeData(s);
        System.out.println("Wheel "+ s);
    }
    public void controlArm(int x, String s1, String s2){
        switch(x){
            case 0:
                writeData(s1);
                System.out.println("Arm "+s1);
                break;
            case 50:
                writeData("V");
                System.out.println("Arm Stop");
                break;
            case 100:
                writeData(s2);
                System.out.println("Arm "+s2);
                break;
        }
    }
    
    private void controlCamera(String s) {
        writeData(s);
        System.out.println("Camera "+s);
    }
    
    
    @Override
    public void keyTyped(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyPressed(KeyEvent e) {
        c++;
        if(en_keyboard){
            int key = e.getKeyCode();
        switch(key){
            case KeyEvent.VK_W:
                if(c == 1){
                    controlWheel("F");
                }
                break;
                
            case KeyEvent.VK_S:
                if(c == 1){
                    controlWheel("B");
                }
                break;
                
            case KeyEvent.VK_A:
                if(c == 1){
                    controlWheel("L");
                }
                break;
                
            case KeyEvent.VK_D:
                if(c == 1){
                    controlWheel("R");
                }
                break;
               
            case KeyEvent.VK_SPACE:
                if(c == 1){
                    controlWheel("S");
                }
                break;
                
            case KeyEvent.VK_0:
                if(c == 1){
                    slider_speed.setValue(0);
                }
                break;
                
            case KeyEvent.VK_1:
                if(c == 1){
                    slider_speed.setValue(20);
                }
                break;
                
            case KeyEvent.VK_2:
                if(c == 1){
                    slider_speed.setValue(40);
                }
                break;
                
            case KeyEvent.VK_3:
                if(c == 1){
                    slider_speed.setValue(60);
                }
                break;
                
            case KeyEvent.VK_4:
                if(c == 1){
                    slider_speed.setValue(80);
                }
                break;
                
            case KeyEvent.VK_5:
                if(c == 1){
                    slider_speed.setValue(100);
                }
                break;
            
            case KeyEvent.VK_N:
                if(c == 1){
                    slider_base.setValue(0);
                }
                break;
            case KeyEvent.VK_M:
                if(c == 1){
                    slider_base.setValue(100);
                }
                break;
                
            case KeyEvent.VK_R:
                if(c == 1){
                    slider_acc1.setValue(0);
                }
                break;
            case KeyEvent.VK_F:
                if(c == 1){
                    slider_acc1.setValue(100);
                }
                break;
                
            case KeyEvent.VK_T:
                if(c == 1){
                    slider_acc2.setValue(0);
                }
                break;
            case KeyEvent.VK_G:
                if(c == 1){
                    slider_acc2.setValue(100);
                }
                break;
                
            case KeyEvent.VK_Y:
                if(c == 1){
                    slider_acc3.setValue(0);
                }
                break;
            case KeyEvent.VK_H:
                if(c == 1){
                    slider_acc3.setValue(100);
                }
                break;
                
            case KeyEvent.VK_U:
                if(c == 1){
                    slider_wrist.setValue(0);
                }
                break;
            case KeyEvent.VK_I:
                if(c == 1){
                    slider_wrist.setValue(100);
                }
                break;
                
            case KeyEvent.VK_O:
                if(c == 1){
                    slider_claw.setValue(0);
                }
                break;
            case KeyEvent.VK_P:
                if(c == 1){
                    slider_claw.setValue(100);
                }
                break;
                
            case KeyEvent.VK_Z:
                if(c == 1){
                    btn_cam_A.setSelected(true);
                    btn_cam_A.doClick();
                }
                break;
            case KeyEvent.VK_X:
                if(c == 1){
                    btn_cam_A.setSelected(false);
                    btn_cam_A.doClick();
                }
                break;
            case KeyEvent.VK_C:
                if(c == 1){
                    btn_cam_B.setSelected(true);
                    btn_cam_B.doClick();
                }
                break;
            case KeyEvent.VK_V:
                if(c == 1){
                    btn_cam_B.setSelected(false);
                    btn_cam_B.doClick();
                }
                break;
                
             case KeyEvent.VK_UP:
                if(c == 1){
                    btn_up.doClick();
                }
                break;
            case KeyEvent.VK_DOWN:
                if(c == 1){
                    btn_down.doClick();
                }
                break;
            case KeyEvent.VK_LEFT:
                if(c == 1){
                    btn_rotateX.doClick();
                }
                break;
            case KeyEvent.VK_RIGHT:
                if(c == 1){
                    btn_rotateY.doClick();
                }
                break;
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        c = 0;
        if(en_keyboard){
            int key = e.getKeyCode();
            switch(key){
                case KeyEvent.VK_W:
                controlWheel("S");
                break;
                
                case KeyEvent.VK_S:
                controlWheel("S");
                break;
                
                case KeyEvent.VK_A:
                controlWheel("S");
                break;
                
                case KeyEvent.VK_D:
                controlWheel("S");
                break;
                
                case KeyEvent.VK_N:
                slider_base.setValue(50);
                break;
                case KeyEvent.VK_M:
                slider_base.setValue(50);
                break;
                case KeyEvent.VK_R:
                slider_acc1.setValue(50);
                break;
                case KeyEvent.VK_F:
                slider_acc1.setValue(50);
                break;
                case KeyEvent.VK_T:
                slider_acc2.setValue(50);
                break;
                case KeyEvent.VK_G:
                slider_acc2.setValue(50);
                break;
                case KeyEvent.VK_Y:
                slider_acc3.setValue(50);
                break;
                case KeyEvent.VK_H:
                slider_acc3.setValue(50);
                break;
                case KeyEvent.VK_U:
                slider_wrist.setValue(50);
                break;
                case KeyEvent.VK_I:
                slider_wrist.setValue(50);
                break;
                case KeyEvent.VK_O:
                slider_claw.setValue(50);
                break;
                case KeyEvent.VK_P:
                slider_claw.setValue(50);
                break;
            }
        }
    }
    
    static class SerialPortReader implements SerialPortEventListener {

    @Override
    public void serialEvent(SerialPortEvent event) {
        if(event.isRXCHAR() && event.getEventValue() > 0) {
            try {
                receivedData = serialPort.readString(event.getEventValue());
                System.out.println("Received response: " + receivedData);
            }
            catch (SerialPortException ex) {
                System.out.println("Error in receiving string from COM-port: " + ex);
            }
        }
    }

    }
}
